import cv2 as cv

 

def setLabel(image, str, contour):

    (text_width, text_height), baseline = cv.getTextSize(str, cv.FONT_HERSHEY_SIMPLEX, 0.7, 1)

    x,y,width,height = cv.boundingRect(contour)

    pt_x = x+int((width-text_width)/2)

    pt_y = y+int((height + text_height)/2)

    cv.rectangle(image, (pt_x, pt_y+baseline), (pt_x+text_width, pt_y-text_height), (200,200,200), cv.FILLED)

    cv.putText(image, str, (pt_x, pt_y), cv.FONT_HERSHEY_SIMPLEX, 0.7, (0,0,0), 1, 8)

 

cap = cv.VideoCapture(0)

 

while (1):

    _, img_color = cap.read()

    #img_color = cv.imread('test.png', cv.IMREAD_COLOR)

    cv.imshow('result_c', img_color)

    #cv.waitKey(0)

 

    img_gray = cv.cvtColor(img_color, cv.COLOR_BGR2GRAY)

    cv.imshow('result_g', img_gray)

    #cv.waitKey(0)

 

    ret,img_binary = cv.threshold(img_gray, 127, 255, cv.THRESH_BINARY_INV|cv.THRESH_OTSU)

    cv.imshow('result_b', img_binary)

    #cv.waitKey(0)

 

 

 

    hsv_hand = cv.cvtColor(img_color, cv.COLOR_BGR2HSV)

    low = (10, 60, 0)

    high = (30, 255, 255)

 

    mask_hand = cv.inRange(hsv_hand, low, high)

 

    kernel = cv.getStructuringElement(cv.MORPH_CROSS, (3, 3))

    mask_hand = cv.morphologyEx(mask_hand, cv.MORPH_CLOSE, kernel, iterations=9)

 

    # res_hand = cv.bitwise_and(img_color, img_color, mask=mask_hand)

    cv.imshow('hand', mask_hand)

 

 

 

    _,contours, hierarchy = cv.findContours(mask_hand, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)

 

 

 

    for cnt in contours:

 

        # 컨투어를 근사화 시키기 전의 직선의 개수

        size = len(cnt)

        #print(size)

 

        epsilon = 0.005 * cv.arcLength(cnt, True)

        approx = cv.approxPolyDP(cnt, epsilon, True)

 

        # 컨투어를 근사화 시킨 후 직선의 개수

        size = len(approx)

        print(size)

 

 

 

        #if cv.isContourConvex(approx):

        if size == 7:

            cv.line(img_color, tuple(approx[0][0]), tuple(approx[size - 1][0]), (0, 255, 0), 3)

            for k in range(size - 1):

                cv.line(img_color, tuple(approx[k][0]), tuple(approx[k + 1][0]), (0, 255, 0), 3)

            setLabel(img_color, "turn right", cnt)

        elif (size >= 25)&(size<=33):

            cv.line(img_color, tuple(approx[0][0]), tuple(approx[size - 1][0]), (0, 255, 0), 3)

            for k in range(size - 1):

                cv.line(img_color, tuple(approx[k][0]), tuple(approx[k + 1][0]), (0, 255, 0), 3)

            setLabel(img_color, "hand", cnt)

 

        elif (size >= 17)&(size<=21):

            cv.line(img_color, tuple(approx[0][0]), tuple(approx[size - 1][0]), (0, 255, 0), 3)

            for k in range(size - 1):

                cv.line(img_color, tuple(approx[k][0]), tuple(approx[k + 1][0]), (0, 255, 0), 3)

            setLabel(img_color, "fist", cnt)

 

            #else:

                #setLabel(img_color, str(size), cnt)

        #else:

           # setLabel(img_color, str(size), cnt)

 

    cv.imshow('result', img_color)

 

 

    k = cv.waitKey(5) & 0xFF

    if k == 27:

        cv.destroyAllWindows()

        break

 

#cv.waitKey(0)