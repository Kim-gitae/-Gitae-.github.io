import cv2 as cv

import numpy as np

 

def setLabel (image, str, contour):

 

    (text_width, text_height), baseline = cv.getTextSize (str, cv.FONT_HERSHEY_SIMPLEX, 0.7, 1)

 

    x, y, width, height = cv.boundingRect (contour)

 

    pt_x = x + int ((width-text_width) / 2)

 

    pt_y = y + int ((height + text_height) / 2)

 

    cv.rectangle (image, (pt_x, pt_y + baseline), (pt_x + text_width, pt_y-text_height), (200,200,200), cv.FILLED)

 

    cv.putText (image, str, (pt_x, pt_y), cv.FONT_HERSHEY_SIMPLEX, 0.7, (0,0,0), 1, 8)

 

 

 

cap = cv.VideoCapture ("http://192.168.0.85:8091/?action=stream" )

#"http://192.168.0.85:8091/?action=stream" 

 

 

while (1):

 

    _, img_color = cap.read ()

 

    hsv = cv.cvtColor (img_color , cv.COLOR_BGR2HSV)

 

    

 

 

    # Red range

    lower_red = np.array ([165, 150, 50])

 

    upper_red = np.array ([250, 255, 255])

    

    mask_red = cv.inRange (hsv, lower_red, upper_red)

 

    res_red = cv.bitwise_and (img_color , img_color , mask = mask_red)

    

    res_red_th = cv.cvtColor (res_red , cv.COLOR_BGR2GRAY)

    ret, res_red_th = cv.threshold(res_red_th, 127, 255, cv.THRESH_BINARY|cv.THRESH_OTSU)

    

    res_red = cv.resize(res_red, (360, 180))

    res_red_th = cv.resize(res_red_th, (360, 180))

    cv.imshow ('res_red', res_red)

    cv.imshow ('res_red_th', res_red_th)

 

 

 

    #img_color = cv.imread ('test.png', cv.IMREAD_COLOR)

 

    img_color = cv.resize(img_color, (360, 180))

 

    cv.imshow ('result_c', img_color)

 

    # cv.waitKey (0)

 

    img_gray = cv.cvtColor (img_color, cv.COLOR_BGR2GRAY)

 

    

 

    # cv.waitKey (0)

 

 

 

    ret,img_binary = cv.threshold(img_gray, 127, 255, cv.THRESH_BINARY_INV|cv.THRESH_OTSU)

    

    

 

 

 

  

 

    #cv.waitKey(0)

 

 

 

 

 

 

 

    hsv_hand = cv.cvtColor(img_color, cv.COLOR_BGR2HSV)

 

    low = (10, 60, 0)

 

    high = (30, 255, 255)

 

 

 

    mask_hand = cv.inRange(hsv_hand, low, high)

 

 

 

    kernel = cv.getStructuringElement(cv.MORPH_CROSS, (3, 3))

 

    mask_hand = cv.morphologyEx(mask_hand, cv.MORPH_CLOSE, kernel, iterations=9)

 

 

 

    # res_hand = cv.bitwise_and(img_color, img_color, mask=mask_hand)

 

    #cv.imshow('hand', mask_hand)

 

 

 

 

 

 

 

    _,contours, hierarchy = cv.findContours(res_red_th, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)

 

 

 

 

 

 

 

    for cnt in contours:

 

 

 

        # 컨투어를 근사화 시키기 전의 직선의 개수

 

        size = len(cnt)

 

        #print(size)

 

 

 

        epsilon = 0.005 * cv.arcLength(cnt, True)

 

        approx = cv.approxPolyDP(cnt, epsilon, True)

 

 

 

        # 컨투어를 근사화 시킨 후 직선의 개수

 

        size = len(approx)

 

        #print(size)

        

 

 

        #if cv.isContourConvex(approx):

 

        

            

        if (size==4):

 

                    cv.line(img_color, tuple(approx[0][0]), tuple(approx[size - 1][0]), (0, 255, 0), 3)

 

                    for k in range(size - 1):

 

                        cv.line(img_color, tuple(approx[k][0]), tuple(approx[k + 1][0]), (0, 255, 0), 3)

 

                    setLabel(img_color, "stop", cnt)

                    print("stop")

                  

 

            #else:

 

                #setLabel(img_color, str(size), cnt)

 

        #else:

 

           # setLabel(img_color, str(size), cnt)

 

 

 

    cv.imshow('result', img_color)

 

 

 

 

 

    k = cv.waitKey(5) & 0xFF

 

    if k == 27:

 

        cv.destroyAllWindows()

 

        break

 

#cv.waitKey(0)