import time

import cv2

import sys

import math

import cv2 as cv

import numpy as np
 

#cap = cv2.VideoCapture("http://192.168.0.85:8091/?action=stream")

#"http://192.168.0.85:8091/?action=stream"

cap = cv2.VideoCapture(1)

while (True):

    count=0

    

    ret, src = cap.read()

    src = cv2.resize(src, (480, 270))

    cv2.imshow('src', src)

    hsv = cv2.cvtColor (src, cv2.COLOR_BGR2HSV)

    # Yellow range

 

    lower_yellow = np.array ([20, 100, 180])

 

    upper_yellow = np.array ([30, 255, 255])

    

    mask_yellow = cv2.inRange (hsv, lower_yellow, upper_yellow)

    

    res_yellow = cv2.bitwise_and (src, src, mask = mask_yellow)

    

    #cv2.imshow('res_green', res_green)

    

    src = cv2.resize(res_yellow, (480, 270))

#    src = cv2.resize(src, (360, 180))

      

    dst = cv.Canny(src, 50, 200, None, 3)

 

    cdst = cv.cvtColor(dst, cv.COLOR_GRAY2BGR)

    cdstP = np.copy(cdst)

 

    lines = cv.HoughLines(dst, 1, np.pi / 180, 70, None, 0, 0)#70,75

    

    if lines is not None:

        for i in range(0, len(lines)):

            rho = lines[i][0][0]

            theta = lines[i][0][1]

            a = math.cos(theta)

            b = math.sin(theta)

            x0 = a * rho

            y0 = b * rho

            pt1 = (int(x0 + 30000 * (-b)), int(y0 + 30000 * (a)))#100000

            pt2 = (int(x0 - 30000  * (-b)), int(y0 - 30000 * (a)))#100000

            cv.line(cdst, pt1, pt2, (0, 0, 255), 5, cv.LINE_AA)#3

 

    linesP = cv.HoughLinesP(dst, 1, np.pi / 180, 15, None, 8, 2)#7

    print(linesP)

    if linesP is not None:

        for i in range(0, len(linesP)):

            l = linesP[i][0]

            cv.line(cdstP, (l[0], l[1]), (l[2], l[3]), (0, 0, 255), 3, cv.LINE_AA)

 

    cv.imshow("Source", src)

    cv.imshow("Standard Hough Line Transform", cdst)

    cv.imshow("Probabilistic Line Transform", cdstP)

 

    

 

 

    if cv2.waitKey(1) & 0xFF == ord('q'):

        break

 

#    if(l[1] > l[3]):

#        if(l[2]-l[0]>90):

#            count='a'

#        elif(l[2]-l[0]<90):

#            count='b'

#        elif(l[2]-l[0]==90):

#            count='c'

#    elif(l[1] < l[3]):

#        if(l[2]-l[0]>270):

#            count='d'

#        elif(l[2]-l[0]<270):

#            count='e'

#        elif(l[2]-l[0]==270):

#            count='c'

#    print(count)

 

cap.release()

cv2.destroyAllWindows()